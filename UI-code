import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QCalendarWidget, QListWidget, QLineEdit, QPushButton, QComboBox, QVBoxLayout, QHBoxLayout, QWidget, QMenu, QAction, QStackedWidget, QLabel, QMessageBox, QInputDialog
from PyQt5.QtCore import Qt, QDate, QTimer
from collections import defaultdict
import datetime
import random
import matplotlib.pyplot as plt
import os

importance_level = {'High': 0, 'Medium': 1, 'Low': 2}

class Task:
    def __init__(self, name, mother=None, importance=None, date=None, tag=None, repeat=None, reminder=None):
        self.name = name
        self.mother = mother
        self.importance = importance
        self.date = date
        self.tag = tag
        self.repeat = repeat
        self.reminder = reminder
        self.done = False

    def __repr__(self):
        return f"{self.name}"

    def is_overdue(self):
        if self.date is not None and self.date < datetime.date.today():
            return True
        return False

    def turn_to_lst(self):
        new_lst = TaskList(name=self.name, mother=self.mother)
        new_lst.importance = self.importance
        new_lst.date = self.date
        new_lst.tag = self.tag
        new_lst.repeat = self.repeat
        new_lst.reminder = self.reminder
        return new_lst

class TaskList(Task):
    def __init__(self, name="Root", mother=None):
        super().__init__(name=name, mother=mother)
        self.name = name
        self.full = []
        self.tag_dict = {}

    def generate_random_task(self):
        task_names = ['Do the dishes', 'Complete assignment', 'Go for a run', 'Read a book', 'Call a friend']
        random_tasks = Task(random.choice(task_names), date=datetime.date.today(), tag='random')
        self.full.append(random_tasks)

    def add_task(self, name, tag=None, importance=None, date=None, repeat=None, reminder=None, done=False):
        for t in self:
            if t.name == name:
                raise ValueError
        self.full.append(Task(name, self, importance, date, tag, repeat, reminder))

    def remove_all_done(self):
        for task in self:
            if task.done:
                self.remove_task(task.name)

    def remove_task(self, name):
        try:
            self.full.remove(self[name])
        except ValueError:
            raise IndexError

    def finish_task(self, name):
        self[name].done = True
        tracker.track_task(self[name])

    def rewrite(self, name, mode='name', content=None):
        if mode == "name":
            self[name].name = content
        if mode == "importance":
            self[name].importance = content
        if mode == "tag":
            self[name].tag = content

    def refresh_tag_dict(self):
        self.tag_dict = {}
        for t in self:
            if t.tag not in self.tag_dict:
                self.tag_dict.setdefault(t.tag, [t.name])
            else:
                self.tag_dict[t.tag].append(t.name)

    def get(self, mode='tag', content=None):
        if mode == 'tag':
            self.refresh_tag_dict()
            return self.tag_dict[content]

    def get_all(self, mode=0):
        lst = []
        if mode == 0:
            for t in self:
                if type(t) is Task:
                    lst.append(t)
                elif type(t) is TaskList:
                    lst.append({t.name: t.get_all()})
            return lst
        if mode == 1:
            for t in self:
                if type(t) is Task:
                    lst.append(t.name)
                elif type(t) is TaskList:
                    lst.append(t.name)
                    for i in t.get_all(1):
                        lst.append(i if type(i) is str else i.name)
            return lst

    def make_task_list(self, name):
        self[name] = self[name].turn_to_lst()

    def export(self):
        pass

    def search(self, keyword, mode="name", in_sub=False):
        ans = []

        def match(task):
            if mode == "name" and keyword in task.name:
                return True
            if mode == "importance" and keyword == task.importance:
                return True
            if mode == "date" and keyword == task.date:
                return True
            if mode == "tag" and keyword == task.tag:
                return True
            return False

        if not in_sub:
            for task in self:
                if match(task):
                    ans.append(task.name)
            return ans

        if in_sub:
            for task in self.get_all(mode=1):
                if match(task):
                    ans.append(task.name)
            return ans

    def sort_with(self, mode='name', sub_mode='datetime'):
        lst = []
        if mode == 'name':
            lst = sorted(self.get_all(mode=1))
        if mode == 'importance':
            lst = self.full.copy()
            lst.sort(key=lambda task: importance_level.get(task.importance, 3))
        if mode == 'date':
            lst = self.full.copy()
            lst.sort(key=lambda task: (task.date is None, task.date))
        if mode == 'tag':
            lst = self.full.copy()
            self.refresh_tag_dict()
            lst.sort(key=lambda task: self.tag_dict.keys())
        return lst

    def __repr__(self):
        return f"{self.name}: {[i for i in self.full]}"

    def __iter__(self):
        self.current = 0
        return self

    def __next__(self):
        try:
            self.current += 1
            return self.full[self.current - 1]
        except IndexError:
            raise StopIteration

    def __setitem__(self, key, value):
        for i in self.full:
            if i.name == key:
                self.remove_task(i.name)
                self.full.append(value)

    def __contains__(self, name):
        return name in [i.name for i in self.full]

    def __getitem__(self, index):
        for i in self.full:
            if i.name == index:
                return i
        raise IndexError

class Viewer:
    def __init__(self, init):
        self.current = init

class Tracker:
    def __init__(self):
        self.weekly_tasks = []
        self.monthly_tasks = []
        self.weekly_tags = {}
        self.monthly_tags = {}

    def track_task(self, task):
        today = datetime.date.today()
        if task.done:
            if task.date:
                if task.date.isocalendar()[1] == today.isocalendar()[1]:
                    self.weekly_tasks.append(task)
                    if task.tag not in self.weekly_tags:
                        self.weekly_tags[task.tag] = [task]
                    else:
                        self.weekly_tags[task.tag].append(task)
                if today.year == task.date.year and today.month == task.date.month:
                    self.monthly_tasks.append(task)
                    if task.tag not in self.monthly_tags:
                        self.monthly_tags[task.tag] = [task]
                    else:
                        self.monthly_tags[task.tag].append(task)

    def generate_weekly_report(self):
        weekly_completed_task = len(self.weekly_tasks)
        report = f"Weekly completed tasks: {weekly_completed_task}\n"
        report += "Tasks by tag:\n"
        for tag, tasks in self.weekly_tags.items():
            report += f"  {tag}: {len(tasks)} tasks\n"
        return report

    def generate_monthly_report(self):
        monthly_completed_task = len(self.monthly_tasks)
        report = f"Monthly completed tasks: {monthly_completed_task}\n"
        report += "Tasks by tag:\n"
        for tag, tasks in self.monthly_tags.items():
            report += f"  {tag}: {len(tasks)} tasks\n"
        return report

    def generate_completion_chart(self):
        labels = 'Completed', 'Pending'
        total_tasks = len(root.full)
        completed_tasks = len([task for task in root.full if task.done])
        pending_tasks = total_tasks - completed_tasks
        sizes = [completed_tasks, pending_tasks]
        colors = ['lightgreen', 'lightcoral']
        explode = (0.1, 0)

        plt.figure(figsize=(7, 7))
        plt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1%%', shadow=True, startangle=140)
        plt.axis('equal')
        plt.title('Task Completion Status')
        plt.show()

def task_to_text(t, layer=0):
    if type(t) is Task:
        return f"{'    '*layer} - {t.name} - {t.tag} - {t.importance} - {t.date} - {t.repeat} - {t.done}"
    if type(t) is TaskList:
        ans = ""
        ans += f"{'    '*layer} - {t.name} - {t.tag} - {t.importance} - {t.date} - {t.repeat} - {t.done}" + '\n'
        for task in t:
            ans += task_to_text(task, layer + 1) + '\n'
        return ans

def save(root):
    file_path = os.path.join(os.path.expanduser("~"), "save.txt")
    f = open(file_path, "wt", encoding="utf-8")
    f.write(task_to_text(root).replace('\n\n', '\n'))
    f.close()

def read(file):
    pass

# 創建一個 Tracker 實例
tracker = Tracker()

# 初始化根任務列表
root = TaskList()
root.add_task("One")
root.add_task("Two")
root.add_task("Three")
root.add_task("Four")
root.add_task("Five")
root.make_task_list("One")
root["One"].add_task("1:1")
root["One"].make_task_list("1:1")
root["One"].add_task("1:2")
root["One"].add_task("1:3")
root["One"]["1:1"].add_task("1:1:1")
root.add_task('task1', date=datetime.date.today(), tag="work", reminder="One day before")
root.add_task('task2', date=datetime.date.today(), tag="personal", reminder="Three days before")
root.add_task('task3', date=datetime.date.today(), tag="personal", reminder="One week before")
root.finish_task('task1')

# 打印任務列表和搜尋結果
print(root)
print(root["Two"])
print(root.get_all(0))
print(root.get_all(1))
print(root.search("One", 'name'))
save(root)
print(task_to_text(root["One"]).replace('\n\n', '\n'))
print(root.full)
print(root['task1'].done)

# 生成並打印報告
print(tracker.generate_weekly_report())

class TaskManager(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Task Manager")
        self.setGeometry(100, 100, 800, 600)

        # 創建堆疊佈局
        self.stacked_layout = QStackedWidget()

        # 創建主畫面
        main_widget = QWidget()
        main_layout = QHBoxLayout()

        # 創建日曆
        self.calendar = QCalendarWidget()
        self.calendar.clicked.connect(self.show_date)

        # 創建任務列表
        self.task_list = QListWidget()

        # 創建輸入框
        self.task_input = QLineEdit()
        self.task_input.setPlaceholderText("輸入新任務")

        # 創建重要性選擇框
        self.difficulty_combo = QComboBox()
        self.difficulty_combo.addItems(["None", "Low", "Medium", "High"])

        # 創建提醒時間選擇框
        self.reminder_combo = QComboBox()
        self.reminder_combo.addItems(["None", "One day before", "Three days before", "One week before"])

        # 創建標籤選擇框
        self.tag_combo = QComboBox()
        self.tag_combo.setEditable(True)
        self.tag_combo.addItems(["work", "personal", "study"])  # 初始標籤

        # 創建排序選單
        self.sort_order_combo = QComboBox()
        self.sort_order_combo.addItems(["High-Medium-Low", "Low-Medium-High"])
        self.sort_order_combo.currentIndexChanged.connect(self.sort_tasks_by_difficulty)

        # 創建按鈕
        self.add_button = QPushButton("新增任務")
        self.add_button.clicked.connect(self.add_task)
        self.remove_button = QPushButton("刪除任務")
        self.remove_button.clicked.connect(self.remove_task)
        self.finish_button = QPushButton("完成任務")
        self.finish_button.clicked.connect(self.finish_task)

        # 創建排序菜單
        self.sort_menu = QMenu("排序任務")
        self.sort_by_name_action = QAction("按名稱排序")
        self.sort_by_difficulty_action = QAction("按難度排序")
        self.sort_menu.addAction(self.sort_by_name_action)
        self.sort_menu.addAction(self.sort_by_difficulty_action)
        self.sort_by_name_action.triggered.connect(lambda: self.sort_tasks("name"))
        self.sort_by_difficulty_action.triggered.connect(lambda: self.sort_tasks("difficulty"))

        side_layout = QVBoxLayout()
        side_layout.addWidget(self.task_input)
        side_layout.addWidget(self.difficulty_combo)
        side_layout.addWidget(self.reminder_combo)
        side_layout.addWidget(self.tag_combo)
        side_layout.addWidget(self.sort_order_combo)
        side_layout.addWidget(self.add_button)
        side_layout.addWidget(self.remove_button)
        side_layout.addWidget(self.finish_button)
        side_layout.addStretch()
        main_layout.addWidget(self.calendar)
        main_layout.addWidget(self.task_list)
        main_layout.addLayout(side_layout)

        main_widget.setLayout(main_layout)
        self.stacked_layout.addWidget(main_widget)

        # 創建空白畫面
        blank_widget = QWidget()
        self.stacked_layout.addWidget(blank_widget)

        # 創建工具欄
        toolbar = self.addToolBar("工具")
        sort_action = toolbar.addAction("排序")
        sort_action.setMenu(self.sort_menu)
        remove_all_done_action = toolbar.addAction("移除所有完成的任務")
        remove_all_done_action.triggered.connect(self.remove_all_done)

        # 創建底部按鈕
        bottom_layout = QHBoxLayout()
        self.main_button = QPushButton("主畫面")
        self.main_button.clicked.connect(lambda: self.stacked_layout.setCurrentIndex(0))
        self.game_button = QPushButton("小遊戲")
        self.game_button.clicked.connect(lambda: self.stacked_layout.setCurrentIndex(2))
        self.track_button = QPushButton("追蹤")
        self.track_button.clicked.connect(self.track_tasks)
        bottom_layout.addWidget(self.main_button)
        bottom_layout.addWidget(self.game_button)
        bottom_layout.addWidget(self.track_button)

        # 設置中央佈局
        central_widget = QWidget()
        main_layout = QVBoxLayout()
        main_layout.addWidget(self.stacked_layout)
        main_layout.addLayout(bottom_layout)
        central_widget.setLayout(main_layout)
        self.setCentralWidget(central_widget)

        # 初始化任務字典
        self.tasks = defaultdict(list)

        # 創建小遊戲畫面
        self.game_widget = QWidget()
        self.create_game_layout()
        self.stacked_layout.addWidget(self.game_widget)

        # 設定提醒
        self.reminder_timers = []
        self.setup_reminders()

    def create_game_layout(self):
        self.game_layout = QVBoxLayout()
        self.game_label = QLabel("猜一個1到100之間的數字")
        self.game_input = QLineEdit()
        self.game_button = QPushButton("猜測")
        self.game_button.clicked.connect(self.check_guess)
        self.game_result = QLabel("")
       
        self.game_layout.addWidget(self.game_label)
        self.game_layout.addWidget(self.game_input)
        self.game_layout.addWidget(self.game_button)
        self.game_layout.addWidget(self.game_result)
        self.game_widget.setLayout(self.game_layout)
       
        self.target_number = random.randint(1, 100)

    def check_guess(self):
        guess = int(self.game_input.text())
        if guess < self.target_number:
            self.game_result.setText("太低了!")
        elif guess > self.target_number:
            self.game_result.setText("太高了!")
        else:
            self.game_result.setText("恭喜! 你猜對了!")

    def show_date(self, date):
        self.setWindowTitle(f"Task Manager - {date.toString('yyyy-MM-dd')}")
        self.task_list.clear()
        for task in self.tasks[date.toPyDate()]:
            status = "[完成] " if task['finished'] else ""
            item = f"{status}{task['name']} ({task['difficulty']}) - {task['tag']}"
            self.task_list.addItem(item)

    def add_task(self):
        task_name = self.task_input.text()
        difficulty = self.difficulty_combo.currentText()
        reminder = self.reminder_combo.currentText()
        tag = self.tag_combo.currentText()
        if tag not in [self.tag_combo.itemText(i) for i in range(self.tag_combo.count())]:
            self.tag_combo.addItem(tag)
        if task_name:
            date = self.calendar.selectedDate().toPyDate()
            task = {'name': task_name, 'difficulty': difficulty, 'finished': False, 'reminder': reminder, 'tag': tag}
            self.tasks[date].append(task)
            self.setup_reminders()
            self.show_date(self.calendar.selectedDate())
            self.task_input.clear()

    def remove_task(self):
        selected_items = self.task_list.selectedItems()
        if selected_items:
            date = self.calendar.selectedDate().toPyDate()
            for item in selected_items:
                task_name = item.text().split(" (")[0].replace("[完成] ", "")
                for task in self.tasks[date]:
                    if task['name'] == task_name:
                        self.tasks[date].remove(task)
                        break
            self.show_date(self.calendar.selectedDate())
            self.setup_reminders()

    def finish_task(self):
        selected_items = self.task_list.selectedItems()
        if selected_items:
            date = self.calendar.selectedDate().toPyDate()
            for item in selected_items:
                task_name = item.text().split(" (")[0].replace("[完成] ", "")
                for task in self.tasks[date]:
                    if task['name'] == task_name:
                        task['finished'] = True
                        break
            self.show_date(self.calendar.selectedDate())
            self.setup_reminders()

    def sort_tasks(self, mode):
        if mode == "name":
            self.task_list.sortItems(Qt.AscendingOrder)
        elif mode == "difficulty":
            self.sort_tasks_by_difficulty()

    def sort_tasks_by_difficulty(self):
        current_sort = self.sort_order_combo.currentText()
        date = self.calendar.selectedDate().toPyDate()
        if date in self.tasks:
            if current_sort == "High-Medium-Low":
                self.tasks[date].sort(key=lambda x: self.get_difficulty_level(x['difficulty']), reverse=True)
            elif current_sort == "Low-Medium-High":
                self.tasks[date].sort(key=lambda x: self.get_difficulty_level(x['difficulty']), reverse=False)
            self.show_date(self.calendar.selectedDate())

    def get_difficulty_level(self, difficulty):
        difficulties = {"None": 0, "Low": 1, "Medium": 2, "High": 3}
        return difficulties[difficulty]

    def remove_all_done(self):
        date = self.calendar.selectedDate().toPyDate()
        self.tasks[date] = [task for task in self.tasks[date] if not task['finished']]
        self.show_date(self.calendar.selectedDate())
        self.setup_reminders()

    def track_tasks(self):
        tracker.generate_completion_chart()

    def setup_reminders(self):
        for timer in self.reminder_timers:
            timer.stop()

        self.reminder_timers = []

        for date, tasks in self.tasks.items():
            for task in tasks:
                if task['reminder'] != "None" and not task['finished']:
                    reminder_time = self.calculate_reminder_time(date, task['reminder'])
                    if reminder_time:
                        timer = QTimer(self)
                        timer.setSingleShot(True)
                        timer.timeout.connect(lambda task=task: self.show_reminder(task))
                        timer.start(reminder_time)
                        self.reminder_timers.append(timer)

    def calculate_reminder_time(self, task_date, reminder):
        now = datetime.datetime.now()
        task_datetime = datetime.datetime.combine(task_date, datetime.time(0, 0))
        if reminder == "One day before":
            reminder_datetime = task_datetime - datetime.timedelta(days=1)
        elif reminder == "Three days before":
            reminder_datetime = task_datetime - datetime.timedelta(days=3)
        elif reminder == "One week before":
            reminder_datetime = task_datetime - datetime.timedelta(weeks=1)
        else:
            return None

        reminder_time = (reminder_datetime - now).total_seconds() * 1000
        return reminder_time if reminder_time > 0 else None

    def show_reminder(self, task):
        QMessageBox.information(self, "Task Reminder", f"提醒: {task['name']} 快到期了！")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    task_manager = TaskManager()
    task_manager.show()
    sys.exit(app.exec_())
